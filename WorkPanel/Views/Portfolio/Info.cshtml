@using System.Globalization
@using WorkPanel.Models.PortfolioViewModels
@model AssetViewModel
@Html.AntiForgeryToken()
<div class="modal-dialog" style="width: 400px;">    
    <div class="modal-content">          
        <div style="height:30px; padding: 10px;">
            <button type="button" class="close" data-dismiss="modal" >&times;</button>
        </div>
        <div class="modal-body" style="margin-top: 0px;">
            <div style="text-align: center;">
                <h3>@Model.Name</h3>
            </div>
            <div style="text-align: center;">
                <h4>@Model.Quantity.ToString("n2", new CultureInfo("en-US")) <span style="color: lightgray">@Model.ShortName</span></h4>
            </div>
            <hr />
            <div id="app-info" class="row">
                <div class="col-md-9" style="float: none; margin: 0 auto;">        
                    <input id="ShortName" class="form-control" type="hidden" />
                    <input id="PurchaseType" class="form-control" type="hidden" />
                    <div class="form-group">
                        <div class="input-group date" id="datetimepicker-info">
                            <input id="Date" name="Date" type="text" class="form-control" placeholder="Date (DD/MM/YYYY) and Time (HH:MM)"/>
                            <span class="input-group-addon">
                                <span class="glyphicon glyphicon-calendar"></span>
                            </span>
                        </div>
                        <span id="sellDateSpan" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <div class="input-group">
                            <input id="Quantity" class="form-control" type="number" min="0" step="0.01" placeholder="Sold Quantity"/>
                            <span class="input-group-addon">
                                <span class="not-active-price" onclick="sellAll()">ALL</span>
                            </span>
                        </div>
                        <span id="sellQuantitySpan" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <div class="input-group">
                            <input id="Price" type="number" min="0" step="0.01"  class="form-control" placeholder="Sold Price"/>
                            <span class="input-group-addon">
                                @*@if (Model.HasBtc)
                    {
                        <span id="btc-span" class="not-active-price" onclick="togglePrice()">BTC</span>
                        <span id="usd-span" class="active-price" onclick="togglePrice()">USD</span>
                    }
                    else
                    {
                        <span class="active-price">USD</span>
                    }*@
                                <span id="btc-span" class="not-active-price" onclick="togglePrice()">BTC</span>
                                <span id="usd-span" class="active-price" onclick="togglePrice()">USD</span>
                            </span>
                        </div>
                        <span id="sellPriceSpan" class="text-danger"></span>
                    </div>    
                    <div  id="BTC-price-div" class="form-group" style="display: none;">
                        <input id="BTCPrice" type="number" min="0" step="0.01"  class="form-control" placeholder="BTC Price"/>
                        <span id="sellBTCPriceSpan" class="text-danger"></span>
                    </div>
                    <div class="form-group" style="text-align: center; margin-top: 20px; margin-bottom: 20px">
                        <input id="sell-button" type="submit" value="Sell" class="btn btn-default" style="border-radius: 20px; width: 150px; background: whitesmoke;" onclick="validateSelling()"/>
                        <br />
                        <span id="sellButtonSpan" class="text-danger"></span>
                    </div>                    
                </div>
            </div>
        </div>
    </div>
</div>

<script>

    var isUSD = true;

    var assetName = "@Model.ShortName";

    var btcPriceInput = $("#BTC-price-div");

    $(function() {
        $('#datetimepicker-info').datetimepicker({
            format: 'DD/MM/YYYY HH:mm'
        });
        //DD/MM/YYYY) and Time (HH:MM
    });

    function togglePrice() {
        isUSD = !isUSD;
        switch (isUSD) {
            case true:
                document.getElementById("btc-span").className = "not-active-price";
                document.getElementById("usd-span").className = "active-price";
                btcPriceInput.hide();
                $("#PurchaseType").val("USD");
                break;
            case false:
                document.getElementById("btc-span").className = "active-price";
                document.getElementById("usd-span").className = "not-active-price";
                btcPriceInput.show();
                $("#PurchaseType").val("BTC");
                break;
        }
    }

    function sellAll() {
        var allQuantity = parseFloat("@Model.Quantity".replace(',', '.'));
        $("#Quantity").val(allQuantity);
    }

    function validateSelling() {
        var errors = 0;        
        $("#sellDateSpan").text("");
        $("#sellQuantitySpan").text("");
        $("#sellPriceSpan").text("");
        $("#sellButtonSpan").text(""); 
        $("#sellBTCPriceSpan").text(""); 
        var date = $("#Date").val();
        var quantity = $("#Quantity").val();
        var price = $("#Price").val();
        var btcPrice = $("#BTCPrice").val();
        console.log("date - " + date);
        console.log("quantity - " + quantity);
        console.log("price - " + price);
        if (date === "") {
            errors++;
            $("#sellDateSpan").text("Empty value");
        }
        if (quantity === "" || quantity <= 0) {
            errors++;
            $("#sellQuantitySpan").text("Field is empty or below zero");
        }
        if (price === "" || price <= 0) {
            errors++;
            $("#sellPriceSpan").text("Field is empty or below zero");
        }
        if (!isUSD && assetName === "BTC") {
            errors++;
            $("#sellButtonSpan").text("You can't sell this asset with this type of currency!");
        }
        if (!isUSD && btcPrice <= 0) {
            errors++;
            $("#sellBTCPriceSpan").text("Field is empty or below zero");
        }


        if (errors > 0)
            return false;

        if (isUSD) {
            btcPrice = 0;
        }

        $("#sell-button").attr("disabled", "disabled");

        axios({
                method: 'post',
                url: '/Portfolio/SellAsset',
                data: {
                    ShortName: assetName,
                    Date: date,
                    Quantity: quantity,
                    Price: price,
                    BTCPrice: btcPrice,
                    PurchaseType: isUSD ? "USD" : "BTC"
                }
            })
            .then(function(response) {
                var data = response.data;
                if (data.statusCode === 200) {
                    switch (data.errorCode) {
                    case 2:
                        $("#sellButtonSpan").text("Not enough quantity to sell");
                        $("#sell-button").removeAttr("disabled");
                        break;
                    default:
                        setTimeout(function() { window.location.href = "/Portfolio/Index" }, 500);
                        break;
                    }
                }
            })
            .catch(function(error) {
                $("#sell-button").removeAttr("disabled");
            });
    }
</script>